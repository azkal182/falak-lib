{"version":3,"sources":["../src/math.ts","../src/solar.ts","../src/qibla.ts","../src/methods.ts","../src/defaults.ts","../src/prayer.ts"],"names":["m"],"mappings":"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","file":"index.js","sourcesContent":["export const d2r = (d: number) => (Math.PI / 180) * d;\nexport const r2d = (r: number) => (180 / Math.PI) * r;\nexport const normalizeDeg = (x: number) => ((x % 360) + 360) % 360;\nexport const clamp = (x: number, a: number, b: number) =>\n  Math.max(a, Math.min(b, x));\n\nexport function jdFromDate(y: number, m: number, d: number): number {\n  if (m <= 2) {\n    y -= 1;\n    m += 12;\n  }\n  const A = Math.floor(y / 100);\n  const B = 2 - A + Math.floor(A / 4);\n  return (\n    Math.floor(365.25 * (y + 4716)) +\n    Math.floor(30.6001 * (m + 1)) +\n    d +\n    B -\n    1524.5\n  );\n}\n\nexport function hoursToDate(\n  base: { y: number; m: number; d: number },\n  hours: number,\n  tzOffset: number\n): Date {\n  // \"hours\" adalah jam lokal (0..24). Konversi ke instan Date UTC.\n  const date = new Date(Date.UTC(base.y, base.m - 1, base.d, 0, 0, 0));\n  const h = ((hours % 24) + 24) % 24;\n  date.setUTCHours(h - tzOffset, Math.round((h % 1) * 60), 0, 0);\n  return date;\n}\n","import { d2r, r2d, normalizeDeg, clamp } from \"./math\";\n\nexport function solarDeclinationAndEoT(jd: number): {\n  dec: number;\n  eotMin: number;\n} {\n  const n = jd - 2451545.0;\n  const L = d2r(normalizeDeg(280.46 + 0.9856474 * n));\n  const g = d2r(normalizeDeg(357.528 + 0.9856003 * n));\n  const lam = L + d2r(1.915) * Math.sin(g) + d2r(0.02) * Math.sin(2 * g);\n  const eps = d2r(23.439 - 0.0000004 * n);\n  const dec = Math.asin(Math.sin(eps) * Math.sin(lam));\n  const ra = Math.atan2(Math.cos(eps) * Math.sin(lam), Math.cos(lam));\n  let E = normalizeDeg(r2d(L) - r2d(ra));\n  if (E > 180) E -= 360;\n  return { dec, eotMin: 4 * E };\n}\n\nexport function hourAngleForAltitude(\n  latRad: number,\n  dec: number,\n  h0Deg: number\n): number {\n  const h0 = d2r(h0Deg);\n  const cosH =\n    (Math.sin(h0) - Math.sin(latRad) * Math.sin(dec)) /\n    (Math.cos(latRad) * Math.cos(dec));\n  return r2d(Math.acos(clamp(cosH, -1, 1)));\n}\n\nexport function hourAngleForAsr(\n  latRad: number,\n  dec: number,\n  factor: number\n): number {\n  const phi = Math.abs(r2d(latRad - dec));\n  const hAsrDeg = r2d(Math.atan(1 / (factor + Math.tan(d2r(phi)))));\n  return hourAngleForAltitude(latRad, dec, hAsrDeg);\n}\n\nexport const solarNoonHours = (tz: number, lonDeg: number, eotMin: number) =>\n  12 + tz - lonDeg / 15 - eotMin / 60;\n","import { d2r, r2d, normalizeDeg } from \"./math\";\n\nexport function qiblaBearing(latDeg: number, lonDeg: number): number {\n  const φ1 = d2r(latDeg),\n    λ1 = d2r(lonDeg);\n  const φ2 = d2r(21.4225),\n    λ2 = d2r(39.8262); // Ka'bah\n  const y = Math.sin(λ2 - λ1) * Math.cos(φ2);\n  const x =\n    Math.cos(φ1) * Math.sin(φ2) -\n    Math.sin(φ1) * Math.cos(φ2) * Math.cos(λ2 - λ1);\n  return normalizeDeg(r2d(Math.atan2(y, x)));\n}\n","import type { MethodDef, MethodId } from \"./types\";\n\nexport const METHODS: Record<MethodId, MethodDef> = {\n  MWL: { name: \"MWL\", fajr: 18, isha: { angle: 17 } },\n  Egyptian: { name: \"Egyptian\", fajr: 19.5, isha: { angle: 17.5 } },\n  Karachi: { name: \"Karachi\", fajr: 18, isha: { angle: 18 } },\n  ISNA: { name: \"ISNA\", fajr: 15, isha: { angle: 15 } },\n  UmmAlQura: { name: \"Umm al-Qura\", fajr: 18.5, isha: { interval: 90 } },\n  KemenagRI: { name: \"Kemenag RI\", fajr: 20, isha: { angle: 18 } },\n};\n\nexport function resolveMethod(m?: MethodId | MethodDef): MethodDef {\n  if (!m) return METHODS.KemenagRI;\n  return typeof m === \"string\" ? METHODS[m] : m;\n}\n","// src/defaults.ts\nimport type { AsrMadhhab, MethodId } from \"./types\";\n\nexport const DEFAULTS = {\n  altitude: 0,\n  method: \"KemenagRI\" as MethodId,\n  asrMadhhab: \"shafii\" as AsrMadhhab,\n  ihtiyathMinutes: 0,\n  sunriseSunsetAngle: -0.833,\n  imsakOffsetMinutes: 10,\n  dhuhaAngleDeg: 4.5,\n  dhuhaEndMarginMinutes: 2,\n};\n\nexport type FalakDefaults = typeof DEFAULTS;\n\nlet RUNTIME_DEFAULTS: FalakDefaults = { ...DEFAULTS };\n\nexport function setFalakDefaults(patch: Partial<FalakDefaults>) {\n  RUNTIME_DEFAULTS = { ...RUNTIME_DEFAULTS, ...patch };\n}\n\nexport function getFalakDefaults(): FalakDefaults {\n  return { ...RUNTIME_DEFAULTS };\n}\n","// src/prayer.ts\nimport { d2r, r2d, jdFromDate, hoursToDate } from \"./math\";\nimport {\n  solarDeclinationAndEoT,\n  hourAngleForAltitude,\n  hourAngleForAsr,\n  solarNoonHours,\n} from \"./solar\";\nimport { qiblaBearing } from \"./qibla\";\nimport { resolveMethod } from \"./methods\";\nimport { getFalakDefaults } from \"./defaults\";\nimport type { PrayerCalcOptions, PrayerTimesResult } from \"./types\";\n\nexport function computePrayerTimes(opts: PrayerCalcOptions): PrayerTimesResult {\n  // Merge defaults untuk semua opsi opsional\n  const merged = { ...getFalakDefaults(), ...opts };\n\n  const {\n    // wajib\n    date,\n    latitude,\n    longitude,\n    tzOffset,\n    // opsional (sudah ada default dari merged)\n    altitude,\n    method: mOpt,\n    asrMadhhab,\n    ihtiyathMinutes,\n    sunriseSunsetAngle,\n    imsakOffsetMinutes,\n    dhuhaAngleDeg,\n    dhuhaEndMarginMinutes,\n  } = merged;\n\n  const { y, m, d } = toYMD(date);\n  const method = resolveMethod(mOpt);\n  const latR = d2r(latitude);\n\n  // JD 0h UTC\n  const jd = jdFromDate(y, m, d);\n\n  // 2-pass sekitar zawaal\n  let { dec, eotMin } = solarDeclinationAndEoT(jd);\n  let noonH = solarNoonHours(tzOffset, longitude, eotMin);\n  const jdNoonApprox = jd + (noonH - tzOffset) / 24;\n  ({ dec, eotMin } = solarDeclinationAndEoT(jdNoonApprox));\n  noonH = solarNoonHours(tzOffset, longitude, eotMin);\n\n  // koreksi horizon karena altitude\n  const altCorrDeg = -r2d(Math.acos(6371000 / (6371000 + altitude)));\n  const h0_sun = sunriseSunsetAngle - altCorrDeg;\n\n  // Sunrise/Sunset\n  const H_sun = hourAngleForAltitude(latR, dec, h0_sun);\n  const sunriseH = noonH - H_sun / 15;\n  const sunsetH = noonH + H_sun / 15;\n\n  // Dhuhr\n  const dhuhrH = noonH;\n\n  // Fajr / Isha\n  const H_fajr = hourAngleForAltitude(latR, dec, -method.fajr);\n  const fajrH = noonH - H_fajr / 15;\n\n  let ishaH: number;\n  if (method.isha.interval) {\n    ishaH = sunsetH + (method.isha.interval as number) / 60;\n  } else {\n    const H_isha = hourAngleForAltitude(\n      latR,\n      dec,\n      -(method.isha.angle as number)\n    );\n    ishaH = noonH + H_isha / 15;\n  }\n\n  // Asr\n  const asrFactor = asrMadhhab === \"hanafi\" ? 2 : 1;\n  const H_asr = hourAngleForAsr(latR, dec, asrFactor);\n  const asrH = noonH + H_asr / 15;\n\n  // Imsak (offset dari Fajr)\n  const imsakH = fajrH - imsakOffsetMinutes / 60;\n\n  // Dhuha (awal pada +dhuhaAngleDeg, akhir mendekati Dhuhr)\n  const H_dhuhaStart = hourAngleForAltitude(latR, dec, +dhuhaAngleDeg);\n  const dhuhaStartH = Math.max(sunriseH, noonH - H_dhuhaStart / 15);\n  const dhuhaEndH = Math.max(dhuhaStartH, dhuhrH - dhuhaEndMarginMinutes / 60);\n\n  const addMin = (t: number, m: number) => t + m / 60;\n  const base = { y, m, d };\n  const mk = (h: number | null | undefined) =>\n    isFiniteNum(h) ? hoursToDate(base, h!, tzOffset) : null;\n\n  return {\n    imsak: mk(imsakH),\n    fajr: mk(addMin(fajrH, ihtiyathMinutes)),\n    sunrise: mk(sunriseH),\n    dhuhaStart: mk(dhuhaStartH),\n    dhuhaEnd: mk(dhuhaEndH),\n    dhuhr: mk(addMin(dhuhrH, ihtiyathMinutes)),\n    asr: mk(addMin(asrH, ihtiyathMinutes)),\n    maghrib: mk(sunsetH),\n    isha: mk(addMin(ishaH, ihtiyathMinutes)),\n    meta: {\n      methodName: method.name,\n      usedIhtiyath: ihtiyathMinutes > 0,\n      sunriseSetAngle: h0_sun,\n      qiblaBearingDeg: qiblaBearing(latitude, longitude),\n      notes: [\n        `Imsak = Fajr - ${imsakOffsetMinutes} menit`,\n        `DhuhaStart pada +${dhuhaAngleDeg}°; DhuhaEnd ${dhuhaEndMarginMinutes} menit sebelum Dhuhr`,\n      ],\n    },\n  };\n}\n\nfunction toYMD(date: PrayerCalcOptions[\"date\"]) {\n  if (date instanceof Date)\n    return { y: date.getFullYear(), m: date.getMonth() + 1, d: date.getDate() };\n  return { y: date.year, m: date.month, d: date.day };\n}\nfunction isFiniteNum(x: unknown): x is number {\n  return typeof x === \"number\" && Number.isFinite(x);\n}\n"]}